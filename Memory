# implementation of card game - Memory

import simplegui
import random

card_list = [i%8 for i in range(16)]
random.shuffle(card_list)
exposed = [False for i in range(16)]
card = []
turns = 0
counter = 0
# helper function to initialize globals
def new_game():
    global card_list,exposed,card,counter,turns
    card_list = [i%8 for i in range(16)]
    random.shuffle(card_list)
    exposed = [False for i in range(16)]
    card = []
    counter = 0
    turns = 0

     
# define event handlers
def mouseclick(pos):
    # add game state logic here
    global counter,card,turns
    if counter == 0:
        card.append(pos[0]/50)
        exposed[pos[0]/50] = True
        counter += 1
        turns += 1
    elif counter == 1:
        if not (pos[0]/50 in card):
            card.append(pos[0]/50)
            counter +=1
            exposed[pos[0]/50] = True
    elif counter ==2:
        if not (pos[0]/50 in card):
            if card_list[card[-1]] != card_list[card[-2]]:
                exposed[card[-1]] = False
                exposed[card[-2]] = False
                card.pop()
                card.pop()
            counter -= 1
            turns += 1
            exposed[pos[0]/50] = True
            card.append(pos[0]/50)
                       
# cards are logically 50x100 pixels in size    
def draw(canvas):
    a = -35
    for i in range(len(card_list)):
        a += 50
        canvas.draw_text(str(card_list[i]),[a,65],50,'White')
    b = -50
    for i in exposed:
        b += 50
        if not i:
            canvas.draw_polygon([(b,0),(b+50,0),(b+50,100),(b,100)],2,'Red','Green')
    label.set_text("Turns = "+ str(turns))
# create frame and add a button and label
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")


# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
