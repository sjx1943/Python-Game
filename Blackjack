# Mini-project #6 - Blackjack  sunday

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com 
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
message = ""
poped = []
player = []
dealer = []
deck = []

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.player_hand = []	
        # create Hand object

    def __str__(self):
        m = "Hand contains "
        for c in self.player_hand:
            m = m + str(c) + " "
        return m
        # return a string representation of a hand

    def add_card(self, card):
        self.player_hand.append(card)
        return self.player_hand
    # add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        value = 0
        for card in self.player_hand:
            rank = card.get_rank()
            value = value + VALUES[rank]
        for card in self.player_hand:
            rank = card.get_rank()
            if rank == "A" and value <= 11:
                value = value + 10
        return value
        # compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        p = pos 
        for card in self.player_hand:
            card.draw(canvas,pos)
            p[0] = p[0] + 90
        if in_play == True:
            canvas.draw_image(card_back,CARD_BACK_CENTER,CARD_BACK_SIZE,[116,183],CARD_BACK_SIZE)# draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        poped = []
        self.cards = [Card(suit,rank) for suit in SUITS for rank in RANKS]	# create a Deck object

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.cards)    # use random.shuffle()

    def deal_card(self):
        poped = self.cards.pop()
        return poped
    # deal a card object from the deck
    
    def __str__(self):
        m = "Deck contains "
        for c in self.cards:
            m = m + str(c) + " "
        return m        

    # return a string representing the deck 



#define event handlers for buttons
def deal():
    global outcome,in_play,deck,player,dealer,message,score
    deck = Deck()
    player = Hand()
    dealer = Hand()
    outcome = ""

    if in_play == True:        
        deck.shuffle()
        score -= 1
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        message = "New hand, hit or stand?"
    if in_play == False:
        deck.shuffle()
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card())
        message = "Here is a new hand"
        
    
    # your code goes here
    
    in_play = True
    

def hit():
    global in_play,score,message,outcome
    # replace with your code below
    if in_play == True:
        player.add_card(deck.deal_card())
        message = "Hit or Stand?"
        if player.get_value() > 21:
            in_play = False
            message = "PLayer busted! You lose, play again?"
            score -= 1
            outcome = "Player: " + str(player.get_value()) + " Dealer: " + str(dealer.get_value())

        
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global in_play,score,message,outcome
    if in_play == False:
        message = "The hand is already over. Deal again."
    else:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
        if dealer.get_value() > 21:
            message = "Dealer busted. You win! Play again?"
            score += 1
            in_play = False
        elif dealer.get_value() > player.get_value():
            message = "Dealer wins! Play again?"
            score -= 1
            in_play =False
        elif dealer.get_value() == player.get_value():
            message = "Tie! Dealer wins! Play again?"
            score -= 1
            in_play =False
        elif dealer.get_value() < player.get_value():
            message = "You win! Play again?"
            score += 1
            in_play =False
        outcome = "Dealer: " + str(dealer.get_value()) + " Player: " + str(player.get_value())
        
    # replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
def exit():
    frame.stop()
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack",[270,50],48,"Yellow")
    canvas.draw_text("Score: " + str(score),[80,520],36,"Black")
    canvas.draw_text("Delear:",[80,110],30,"Black")
    canvas.draw_text("Player: ",[80,300],30,"Black")
    canvas.draw_text("message: "+ message,[100,480],26,"Black")
    canvas.draw_text(outcome,[80,560],28,"White")
    dealer.draw(canvas,[80,135])
    player.draw(canvas,[80,325])

# initialization frame
frame = simplegui.create_frame("Blackjack", 700, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.add_button("Exit",exit,200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


